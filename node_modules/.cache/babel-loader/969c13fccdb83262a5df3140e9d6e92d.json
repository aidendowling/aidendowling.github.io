{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/aidendowling/Documents/GitHub/portfoliosite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/aidendowling/Documents/GitHub/portfoliosite/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar decodeIco = require('decode-ico');\nvar _require = require('../mime'),\n  MIME_PNG = _require.MIME_PNG;\n/**\n * @typedef {object} ParsedImage\n * @property {number} width Image width.\n * @property {number} height Image height.\n * @property {number} bpp Image color depth as bits per pixel.\n * @property {ArrayBuffer} buffer Image buffer.\n */\n/**\n * Parse ICO and return some image object.\n *\n * @access private\n * @param {ArrayBuffer|Buffer} data - ICO file data.\n * @param {string} mime - MIME type for output.\n * @param {object} Image - Image encoder/decoder.\n * @returns {Promise<ParsedImage[]>} Resolves to an array of {@link ParsedImage}.\n */\nvar parse = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, mime, Image) {\n    var icons, transcodeImage, parsedImages;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            icons = decodeIco(data);\n            transcodeImage = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(icon) {\n                var decoded;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        if (!(mime === MIME_PNG && icon.type === 'png')) {\n                          _context.next = 2;\n                          break;\n                        }\n                        return _context.abrupt(\"return\", Object.assign({\n                          buffer: icon.data.buffer.slice(icon.data.byteOffset, icon.data.byteOffset + icon.data.byteLength)\n                        }, icon));\n                      case 2:\n                        if (!(icon.type === 'png')) {\n                          _context.next = 7;\n                          break;\n                        }\n                        _context.next = 5;\n                        return Image.decode(icon.data);\n                      case 5:\n                        decoded = _context.sent;\n                        Object.assign(icon, {\n                          data: decoded.data,\n                          type: 'bmp'\n                        });\n                      case 7:\n                        _context.t0 = Object;\n                        _context.t1 = icon;\n                        _context.next = 11;\n                        return Image.encode(icon, mime);\n                      case 11:\n                        _context.t2 = _context.sent;\n                        _context.t3 = mime.replace('image/', '');\n                        _context.t4 = {\n                          buffer: _context.t2,\n                          type: _context.t3\n                        };\n                        return _context.abrupt(\"return\", _context.t0.assign.call(_context.t0, _context.t1, _context.t4));\n                      case 15:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n              return function transcodeImage(_x4) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n            _context2.next = 4;\n            return Promise.all(icons.map(transcodeImage));\n          case 4:\n            parsedImages = _context2.sent;\n            return _context2.abrupt(\"return\", parsedImages);\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function parse(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = parse;","map":{"version":3,"names":["_regeneratorRuntime","require","_asyncToGenerator","decodeIco","_require","MIME_PNG","parse","_ref","mark","_callee2","data","mime","Image","icons","transcodeImage","parsedImages","wrap","_callee2$","_context2","prev","next","_ref2","_callee","icon","decoded","_callee$","_context","type","abrupt","Object","assign","buffer","slice","byteOffset","byteLength","decode","sent","t0","t1","encode","t2","t3","replace","t4","call","stop","_x4","apply","arguments","Promise","all","map","_x","_x2","_x3","module","exports"],"sources":["/Users/aidendowling/Documents/GitHub/portfoliosite/node_modules/icojs/src/parse/index.js"],"sourcesContent":["'use strict';\n\nconst decodeIco = require('decode-ico');\nconst { MIME_PNG } = require('../mime');\n\n/**\n * @typedef {object} ParsedImage\n * @property {number} width Image width.\n * @property {number} height Image height.\n * @property {number} bpp Image color depth as bits per pixel.\n * @property {ArrayBuffer} buffer Image buffer.\n */\n\n/**\n * Parse ICO and return some image object.\n *\n * @access private\n * @param {ArrayBuffer|Buffer} data - ICO file data.\n * @param {string} mime - MIME type for output.\n * @param {object} Image - Image encoder/decoder.\n * @returns {Promise<ParsedImage[]>} Resolves to an array of {@link ParsedImage}.\n */\nconst parse = async (data, mime, Image) => {\n  const icons = decodeIco(data);\n\n  const transcodeImage = async icon => {\n    if (mime === MIME_PNG && icon.type === 'png') {\n      return Object.assign({ buffer: icon.data.buffer.slice(icon.data.byteOffset, icon.data.byteOffset + icon.data.byteLength) }, icon);\n    }\n\n    if (icon.type === 'png') {\n      const decoded = await Image.decode(icon.data);\n      Object.assign(icon, {\n        data: decoded.data,\n        type: 'bmp'\n      });\n    }\n\n    return Object.assign(icon, {\n      buffer: await Image.encode(icon, mime),\n      type: mime.replace('image/', '')\n    });\n  };\n\n  const parsedImages = await Promise.all(icons.map(transcodeImage));\n  return parsedImages;\n};\n\nmodule.exports = parse;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}