{"ast":null,"code":"'use strict';\n\nvar _require = require('../mime'),\n  MIME_PNG = _require.MIME_PNG;\nvar dataURLToArrayBuffer = function dataURLToArrayBuffer(dataURL) {\n  var string = atob(dataURL.replace(/(?:[\\0-\\t\\x0B\\f\\x0E-\\u2027\\u202A-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])+,/, ''));\n  var view = new Uint8Array(string.length);\n  for (var i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\nvar Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode: function decode(arrayBuffer) {\n    return new Promise(function (resolve) {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      var url = URL.createObjectURL(new Blob([arrayBuffer]));\n      var img = document.createElement('img');\n      img.src = url;\n      img.onload = function () {\n        var height = img.naturalHeight,\n          width = img.naturalWidth;\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        var _ctx$getImageData = ctx.getImageData(0, 0, width, height),\n          data = _ctx$getImageData.data;\n        resolve({\n          data: data,\n          height: height,\n          width: width\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode: function encode(image) {\n    var mime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MIME_PNG;\n    return new Promise(function (resolve) {\n      var data = image.data,\n        height = image.height,\n        width = image.width;\n      var canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      var ctx = canvas.getContext('2d');\n      var imageData = ctx.createImageData(width, height);\n      var dataData = imageData.data;\n      for (var i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\nmodule.exports = Image;","map":{"version":3,"names":["_require","require","MIME_PNG","dataURLToArrayBuffer","dataURL","string","atob","replace","view","Uint8Array","length","i","charCodeAt","buffer","Image","decode","arrayBuffer","Promise","resolve","url","URL","createObjectURL","Blob","img","document","createElement","src","onload","height","naturalHeight","width","naturalWidth","canvas","ctx","getContext","drawImage","_ctx$getImageData","getImageData","data","encode","image","mime","arguments","undefined","imageData","createImageData","dataData","putImageData","toDataURL","module","exports"],"sources":["/Users/aidendowling/Documents/GitHub/portfoliosite/node_modules/icojs/src/browser/image.js"],"sourcesContent":["'use strict';\n\nconst { MIME_PNG } = require('../mime');\n\nconst dataURLToArrayBuffer = dataURL => {\n  const string = atob(dataURL.replace(/.+,/u, ''));\n  const view = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\nconst Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode (arrayBuffer) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const url = URL.createObjectURL(new Blob([arrayBuffer]));\n      const img = document.createElement('img');\n      img.src = url;\n      img.onload = () => {\n        const { naturalHeight: height, naturalWidth: width } = img;\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const { data } = ctx.getImageData(0, 0, width, height);\n        resolve({\n          data,\n          height,\n          width\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode (image, mime = MIME_PNG) {\n    return new Promise(resolve => {\n      const { data, height, width } = image;\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      const dataData = imageData.data;\n      for (let i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\n\nmodule.exports = Image;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}