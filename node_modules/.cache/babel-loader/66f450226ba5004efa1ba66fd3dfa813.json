{"ast":null,"code":"'use strict';\n\nconst {\n  MIME_PNG\n} = require('../mime');\nconst dataURLToArrayBuffer = dataURL => {\n  const string = atob(dataURL.replace(/.+,/u, ''));\n  const view = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\nconst Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode(arrayBuffer) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const url = URL.createObjectURL(new Blob([arrayBuffer]));\n      const img = document.createElement('img');\n      img.src = url;\n      img.onload = () => {\n        const {\n          naturalHeight: height,\n          naturalWidth: width\n        } = img;\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const {\n          data\n        } = ctx.getImageData(0, 0, width, height);\n        resolve({\n          data,\n          height,\n          width\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode(image, mime = MIME_PNG) {\n    return new Promise(resolve => {\n      const {\n        data,\n        height,\n        width\n      } = image;\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      const dataData = imageData.data;\n      for (let i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\nmodule.exports = Image;","map":{"version":3,"names":["MIME_PNG","require","dataURLToArrayBuffer","dataURL","string","atob","replace","view","Uint8Array","length","i","charCodeAt","buffer","Image","decode","arrayBuffer","Promise","resolve","url","URL","createObjectURL","Blob","img","document","createElement","src","onload","naturalHeight","height","naturalWidth","width","canvas","ctx","getContext","drawImage","data","getImageData","encode","image","mime","imageData","createImageData","dataData","putImageData","toDataURL","module","exports"],"sources":["/Users/aidendowling/Documents/GitHub/portfoliosite/node_modules/icojs/src/browser/image.js"],"sourcesContent":["'use strict';\n\nconst { MIME_PNG } = require('../mime');\n\nconst dataURLToArrayBuffer = dataURL => {\n  const string = atob(dataURL.replace(/.+,/u, ''));\n  const view = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    view[i] = string.charCodeAt(i);\n  }\n  return view.buffer;\n};\n\nconst Image = {\n  /**\n   * Create imageData from image.\n   *\n   * @access private\n   * @param {ArrayBuffer} arrayBuffer - Image buffer.\n   * @returns {ImageData} ImageData.\n   */\n  decode (arrayBuffer) {\n    return new Promise(resolve => {\n      // eslint-disable-next-line node/no-unsupported-features/node-builtins\n      const url = URL.createObjectURL(new Blob([arrayBuffer]));\n      const img = document.createElement('img');\n      img.src = url;\n      img.onload = () => {\n        const { naturalHeight: height, naturalWidth: width } = img;\n        const canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0);\n        const { data } = ctx.getImageData(0, 0, width, height);\n        resolve({\n          data,\n          height,\n          width\n        });\n      };\n    });\n  },\n  /**\n   * Create image from imgData.data.\n   *\n   * @access private\n   * @param {object} image - Data.\n   * @param {number} image.width - Image width.\n   * @param {number} image.height - Image height.\n   * @param {Uint8ClampedArray} image.data - Same as imageData.data.\n   * @param {string} [mime=image/png] - MIME type.\n   * @returns {ArrayBuffer} Image.\n   */\n  encode (image, mime = MIME_PNG) {\n    return new Promise(resolve => {\n      const { data, height, width } = image;\n      const canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = ctx.createImageData(width, height);\n      const dataData = imageData.data;\n      for (let i = 0; i < dataData.length; i++) {\n        dataData[i] = data[i];\n      }\n      ctx.putImageData(imageData, 0, 0);\n      resolve(dataURLToArrayBuffer(canvas.toDataURL(mime)));\n    });\n  }\n};\n\nmodule.exports = Image;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}